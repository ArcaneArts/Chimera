package art.arcane.chimera.core.protocol;

/**
 * This was generated by Chimera ProtoGen on Mon Mar 08 17:50:57 EST 2021
 */
public class EDN {
    /**
     * Represents the service protocol type.
     * Service is for inter-communication between backend services
     * Gateway is for clients running server functions, keep authentication & security in mind!
     * Client is for server calling client functions. The implementation server side is ignored.
     */
    public static class SERVICE {
        /**
         * Represents the mail service via the service protocol type.
         * Service is for inter-communication between backend services
         * Gateway is for clients running server functions, keep authentication & security in mind!
         * Client is for server calling client functions. The implementation server side is ignored.
         */
        public static class Mail {
            /**
             * Invokes sendMail on the mail service
             * No Description Provided
             *
             * @param emailAddress No Description Provided
             * @param subject      No Description Provided
             * @param message      No Description Provided
             */
            public static java.lang.Boolean sendMail(java.lang.String emailAddress, java.lang.String subject, java.lang.String message) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("sendMail", emailAddress, subject, message)), "mail");
                return result.get();
            }

            /**
             * Schedules sendMail on any mail service to be done at a scheduled time.
             * No Description Provided
             *
             * @param emailAddress No Description Provided
             * @param subject      No Description Provided
             * @param message      No Description Provided
             */
            public static void scheduleSendMail(java.lang.String emailAddress, java.lang.String subject, java.lang.String message, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("mail").deadline(deadline).ttl(ttl).function("sendMail").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{emailAddress, subject, message}));
            }

            /**
             * Schedules sendMail on any mail service to be done at a scheduled time.
             * No Description Provided
             *
             * @param emailAddress No Description Provided
             * @param subject      No Description Provided
             * @param message      No Description Provided
             */
            public static void scheduleSendMail(java.lang.String emailAddress, java.lang.String subject, java.lang.String message, long within) {
                scheduleSendMail(emailAddress, subject, message, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes sendMailHtml on the mail service
             * No Description Provided
             *
             * @param emailAddress No Description Provided
             * @param subject      No Description Provided
             * @param html         No Description Provided
             */
            public static java.lang.Boolean sendMailHtml(java.lang.String emailAddress, java.lang.String subject, java.lang.String html) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("sendMailHtml", emailAddress, subject, html)), "mail");
                return result.get();
            }

            /**
             * Schedules sendMailHtml on any mail service to be done at a scheduled time.
             * No Description Provided
             *
             * @param emailAddress No Description Provided
             * @param subject      No Description Provided
             * @param html         No Description Provided
             */
            public static void scheduleSendMailHtml(java.lang.String emailAddress, java.lang.String subject, java.lang.String html, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("mail").deadline(deadline).ttl(ttl).function("sendMailHtml").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{emailAddress, subject, html}));
            }

            /**
             * Schedules sendMailHtml on any mail service to be done at a scheduled time.
             * No Description Provided
             *
             * @param emailAddress No Description Provided
             * @param subject      No Description Provided
             * @param html         No Description Provided
             */
            public static void scheduleSendMailHtml(java.lang.String emailAddress, java.lang.String subject, java.lang.String html, long within) {
                scheduleSendMailHtml(emailAddress, subject, html, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

        }

        /**
         * Represents the account service via the service protocol type.
         * Service is for inter-communication between backend services
         * Gateway is for clients running server functions, keep authentication & security in mind!
         * Client is for server calling client functions. The implementation server side is ignored.
         */
        public static class Account {
            /**
             * Invokes accountEmailExists on the account service
             * No Description Provided
             *
             * @param email No Description Provided
             */
            public static java.lang.Boolean accountEmailExists(java.lang.String email) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("accountEmailExists", email)), "account");
                return result.get();
            }

            /**
             * Schedules accountEmailExists on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param email No Description Provided
             */
            public static void scheduleAccountEmailExists(java.lang.String email, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("accountEmailExists").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{email}));
            }

            /**
             * Schedules accountEmailExists on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param email No Description Provided
             */
            public static void scheduleAccountEmailExists(java.lang.String email, long within) {
                scheduleAccountEmailExists(email, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes createUser on the account service
             * No Description Provided
             *
             * @param id       No Description Provided
             * @param email    No Description Provided
             * @param password No Description Provided
             */
            public static art.arcane.chimera.core.object.account.User createUser(art.arcane.chimera.core.object.ID id, java.lang.String email, java.lang.String password) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.account.User> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("createUser", id, email, password)), "account");
                return result.get();
            }

            /**
             * Invokes setPhone on the account service
             * No Description Provided
             *
             * @param id      No Description Provided
             * @param carrier No Description Provided
             * @param phone   No Description Provided
             */
            public static java.lang.Boolean setPhone(art.arcane.chimera.core.object.ID id, java.lang.String carrier, java.lang.String phone) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("setPhone", id, carrier, phone)), "account");
                return result.get();
            }

            /**
             * Schedules setPhone on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id      No Description Provided
             * @param carrier No Description Provided
             * @param phone   No Description Provided
             */
            public static void scheduleSetPhone(art.arcane.chimera.core.object.ID id, java.lang.String carrier, java.lang.String phone, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("setPhone").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{id, carrier, phone}));
            }

            /**
             * Schedules setPhone on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id      No Description Provided
             * @param carrier No Description Provided
             * @param phone   No Description Provided
             */
            public static void scheduleSetPhone(art.arcane.chimera.core.object.ID id, java.lang.String carrier, java.lang.String phone, long within) {
                scheduleSetPhone(id, carrier, phone, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes getUserPersonal on the account service
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static art.arcane.chimera.core.object.account.UserPersonal getUserPersonal(art.arcane.chimera.core.object.ID id) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.account.UserPersonal> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getUserPersonal", id)), "account");
                return result.get();
            }

            /**
             * Invokes getAccessToken on the account service
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static art.arcane.chimera.core.object.account.AccessToken getAccessToken(art.arcane.chimera.core.object.ID id) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.account.AccessToken> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getAccessToken", id)), "account");
                return result.get();
            }

            /**
             * Invokes getUser on the account service
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static art.arcane.chimera.core.object.account.User getUser(art.arcane.chimera.core.object.ID id) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.account.User> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getUser", id)), "account");
                return result.get();
            }

            /**
             * Invokes setFirstName on the account service
             * No Description Provided
             *
             * @param id        No Description Provided
             * @param firstName No Description Provided
             */
            public static java.lang.Boolean setFirstName(art.arcane.chimera.core.object.ID id, java.lang.String firstName) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("setFirstName", id, firstName)), "account");
                return result.get();
            }

            /**
             * Schedules setFirstName on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id        No Description Provided
             * @param firstName No Description Provided
             */
            public static void scheduleSetFirstName(art.arcane.chimera.core.object.ID id, java.lang.String firstName, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("setFirstName").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{id, firstName}));
            }

            /**
             * Schedules setFirstName on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id        No Description Provided
             * @param firstName No Description Provided
             */
            public static void scheduleSetFirstName(art.arcane.chimera.core.object.ID id, java.lang.String firstName, long within) {
                scheduleSetFirstName(id, firstName, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes getUserByEmail on the account service
             * No Description Provided
             *
             * @param email No Description Provided
             */
            public static art.arcane.chimera.core.object.ID getUserByEmail(java.lang.String email) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.ID> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getUserByEmail", email)), "account");
                return result.get();
            }

            /**
             * Invokes setLastName on the account service
             * No Description Provided
             *
             * @param id       No Description Provided
             * @param lastName No Description Provided
             */
            public static java.lang.Boolean setLastName(art.arcane.chimera.core.object.ID id, java.lang.String lastName) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("setLastName", id, lastName)), "account");
                return result.get();
            }

            /**
             * Schedules setLastName on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id       No Description Provided
             * @param lastName No Description Provided
             */
            public static void scheduleSetLastName(art.arcane.chimera.core.object.ID id, java.lang.String lastName, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("setLastName").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{id, lastName}));
            }

            /**
             * Schedules setLastName on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id       No Description Provided
             * @param lastName No Description Provided
             */
            public static void scheduleSetLastName(art.arcane.chimera.core.object.ID id, java.lang.String lastName, long within) {
                scheduleSetLastName(id, lastName, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes authenticate on the account service
             * No Description Provided
             *
             * @param id       No Description Provided
             * @param password No Description Provided
             */
            public static java.lang.Boolean authenticate(art.arcane.chimera.core.object.ID id, java.lang.String password) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("authenticate", id, password)), "account");
                return result.get();
            }

            /**
             * Schedules authenticate on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id       No Description Provided
             * @param password No Description Provided
             */
            public static void scheduleAuthenticate(art.arcane.chimera.core.object.ID id, java.lang.String password, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("authenticate").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{id, password}));
            }

            /**
             * Schedules authenticate on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id       No Description Provided
             * @param password No Description Provided
             */
            public static void scheduleAuthenticate(art.arcane.chimera.core.object.ID id, java.lang.String password, long within) {
                scheduleAuthenticate(id, password, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes changePassword on the account service
             * No Description Provided
             *
             * @param id          No Description Provided
             * @param newPassword No Description Provided
             */
            public static java.lang.Boolean changePassword(art.arcane.chimera.core.object.ID id, java.lang.String newPassword) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("changePassword", id, newPassword)), "account");
                return result.get();
            }

            /**
             * Schedules changePassword on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id          No Description Provided
             * @param newPassword No Description Provided
             */
            public static void scheduleChangePassword(art.arcane.chimera.core.object.ID id, java.lang.String newPassword, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("changePassword").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{id, newPassword}));
            }

            /**
             * Schedules changePassword on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id          No Description Provided
             * @param newPassword No Description Provided
             */
            public static void scheduleChangePassword(art.arcane.chimera.core.object.ID id, java.lang.String newPassword, long within) {
                scheduleChangePassword(id, newPassword, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes createAccessToken on the account service
             * No Description Provided
             *
             * @param account No Description Provided
             */
            public static art.arcane.chimera.core.object.account.AccessToken createAccessToken(art.arcane.chimera.core.object.ID account) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.account.AccessToken> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("createAccessToken", account)), "account");
                return result.get();
            }

            /**
             * Invokes getUserAuthentication on the account service
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static art.arcane.chimera.core.object.account.UserAuthentication getUserAuthentication(art.arcane.chimera.core.object.ID id) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.account.UserAuthentication> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getUserAuthentication", id)), "account");
                return result.get();
            }

            /**
             * Invokes createAccessTokenWithType on the account service
             * No Description Provided
             *
             * @param account No Description Provided
             * @param type    No Description Provided
             */
            public static art.arcane.chimera.core.object.account.AccessToken createAccessTokenWithType(art.arcane.chimera.core.object.ID account, java.lang.String type) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.account.AccessToken> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("createAccessTokenWithType", account, type)), "account");
                return result.get();
            }

            /**
             * Invokes getAccessTokenCount on the account service
             * No Description Provided
             */
            public static java.lang.Long getAccessTokenCount() {
                art.arcane.quill.reaction.O<java.lang.Long> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getAccessTokenCount")), "account");
                return result.get();
            }

            /**
             * Invokes setUserSuspension on the account service
             * No Description Provided
             *
             * @param account   No Description Provided
             * @param suspended No Description Provided
             */
            public static java.lang.Boolean setUserSuspension(art.arcane.chimera.core.object.ID account, java.lang.Boolean suspended) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("setUserSuspension", account, suspended)), "account");
                return result.get();
            }

            /**
             * Schedules setUserSuspension on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param account   No Description Provided
             * @param suspended No Description Provided
             */
            public static void scheduleSetUserSuspension(art.arcane.chimera.core.object.ID account, java.lang.Boolean suspended, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("setUserSuspension").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{account, suspended}));
            }

            /**
             * Schedules setUserSuspension on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param account   No Description Provided
             * @param suspended No Description Provided
             */
            public static void scheduleSetUserSuspension(art.arcane.chimera.core.object.ID account, java.lang.Boolean suspended, long within) {
                scheduleSetUserSuspension(account, suspended, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes changeEmail on the account service
             * No Description Provided
             *
             * @param id       No Description Provided
             * @param newEmail No Description Provided
             */
            public static java.lang.Boolean changeEmail(art.arcane.chimera.core.object.ID id, java.lang.String newEmail) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("changeEmail", id, newEmail)), "account");
                return result.get();
            }

            /**
             * Schedules changeEmail on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id       No Description Provided
             * @param newEmail No Description Provided
             */
            public static void scheduleChangeEmail(art.arcane.chimera.core.object.ID id, java.lang.String newEmail, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("changeEmail").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{id, newEmail}));
            }

            /**
             * Schedules changeEmail on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id       No Description Provided
             * @param newEmail No Description Provided
             */
            public static void scheduleChangeEmail(art.arcane.chimera.core.object.ID id, java.lang.String newEmail, long within) {
                scheduleChangeEmail(id, newEmail, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes updateAccessToken on the account service
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static java.lang.Boolean updateAccessToken(art.arcane.chimera.core.object.ID id) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("updateAccessToken", id)), "account");
                return result.get();
            }

            /**
             * Schedules updateAccessToken on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static void scheduleUpdateAccessToken(art.arcane.chimera.core.object.ID id, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("updateAccessToken").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{id}));
            }

            /**
             * Schedules updateAccessToken on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static void scheduleUpdateAccessToken(art.arcane.chimera.core.object.ID id, long within) {
                scheduleUpdateAccessToken(id, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes getUserCount on the account service
             * No Description Provided
             */
            public static java.lang.Long getUserCount() {
                art.arcane.quill.reaction.O<java.lang.Long> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getUserCount")), "account");
                return result.get();
            }

        }

        /**
         * Represents the gateway service via the service protocol type.
         * Service is for inter-communication between backend services
         * Gateway is for clients running server functions, keep authentication & security in mind!
         * Client is for server calling client functions. The implementation server side is ignored.
         */
        public static class Gateway {
            /**
             * Invokes getSessionsListening on the gateway service
             * No Description Provided
             *
             * @param target No Description Provided
             */
            public static art.arcane.quill.collections.KList getSessionsListening(art.arcane.chimera.core.object.ID target) {
                art.arcane.quill.reaction.O<art.arcane.quill.collections.KList> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getSessionsListening", target)), "gateway");
                return result.get();
            }

            /**
             * Invokes getSessionsByToken on the gateway service
             * No Description Provided
             *
             * @param t No Description Provided
             */
            public static art.arcane.quill.collections.KList getSessionsByToken(art.arcane.chimera.core.object.ID t) {
                art.arcane.quill.reaction.O<art.arcane.quill.collections.KList> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getSessionsByToken", t)), "gateway");
                return result.get();
            }

            /**
             * Invokes getSessionsByUser on the gateway service
             * No Description Provided
             *
             * @param user No Description Provided
             */
            public static art.arcane.quill.collections.KList getSessionsByUser(art.arcane.chimera.core.object.ID user) {
                art.arcane.quill.reaction.O<art.arcane.quill.collections.KList> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getSessionsByUser", user)), "gateway");
                return result.get();
            }

            /**
             * Invokes getSessionByID on the gateway service
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static art.arcane.chimera.core.object.Session getSessionByID(java.lang.String id) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.Session> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getSessionByID", id)), "gateway");
                return result.get();
            }

            /**
             * Invokes pushContext on the gateway service
             * No Description Provided
             *
             * @param context No Description Provided
             */
            public static java.lang.Boolean pushContext(art.arcane.chimera.core.protocol.ChimeraContext context) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("pushContext", context)), "gateway");
                return result.get();
            }

            /**
             * Schedules pushContext on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param context No Description Provided
             */
            public static void schedulePushContext(art.arcane.chimera.core.protocol.ChimeraContext context, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("pushContext").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{context}));
            }

            /**
             * Schedules pushContext on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param context No Description Provided
             */
            public static void schedulePushContext(art.arcane.chimera.core.protocol.ChimeraContext context, long within) {
                schedulePushContext(context, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes invokeClientObject on the gateway service
             * No Description Provided
             *
             * @param sessionId      No Description Provided
             * @param f              No Description Provided
             * @param expectedReturn No Description Provided
             * @param blind          No Description Provided
             */
            public static java.lang.Object invokeClientObject(java.lang.String sessionId, art.arcane.chimera.core.protocol.generation.FunctionReference f, java.lang.String expectedReturn, java.lang.Boolean blind) {
                art.arcane.quill.reaction.O<java.lang.Object> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("invokeClientObject", sessionId, f, expectedReturn, blind)), "gateway");
                return result.get();
            }

            /**
             * Invokes getFirstSessionByUser on the gateway service
             * No Description Provided
             *
             * @param user No Description Provided
             */
            public static art.arcane.chimera.core.object.Session getFirstSessionByUser(art.arcane.chimera.core.object.ID user) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.Session> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getFirstSessionByUser", user)), "gateway");
                return result.get();
            }

            /**
             * Invokes getFirstSessionByToken on the gateway service
             * No Description Provided
             *
             * @param t No Description Provided
             */
            public static art.arcane.chimera.core.object.Session getFirstSessionByToken(art.arcane.chimera.core.object.ID t) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.Session> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getFirstSessionByToken", t)), "gateway");
                return result.get();
            }

            /**
             * Invokes cleanupDeadListeners on the gateway service
             * No Description Provided
             */
            public static java.lang.Integer cleanupDeadListeners() {
                art.arcane.quill.reaction.O<java.lang.Integer> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("cleanupDeadListeners")), "gateway");
                return result.get();
            }

            /**
             * Schedules cleanupDeadListeners on any gateway service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleCleanupDeadListeners(long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("cleanupDeadListeners").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{}));
            }

            /**
             * Schedules cleanupDeadListeners on any gateway service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleCleanupDeadListeners(long within) {
                scheduleCleanupDeadListeners(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes cleanupDeadSessions on the gateway service
             * No Description Provided
             */
            public static java.lang.Integer cleanupDeadSessions() {
                art.arcane.quill.reaction.O<java.lang.Integer> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("cleanupDeadSessions")), "gateway");
                return result.get();
            }

            /**
             * Schedules cleanupDeadSessions on any gateway service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleCleanupDeadSessions(long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("cleanupDeadSessions").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{}));
            }

            /**
             * Schedules cleanupDeadSessions on any gateway service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleCleanupDeadSessions(long within) {
                scheduleCleanupDeadSessions(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes publishTargetUpdate on the gateway service
             * No Description Provided
             *
             * @param target No Description Provided
             */
            public static java.lang.Boolean publishTargetUpdate(art.arcane.chimera.core.object.ID target) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("publishTargetUpdate", target)), "gateway");
                return result.get();
            }

            /**
             * Schedules publishTargetUpdate on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param target No Description Provided
             */
            public static void schedulePublishTargetUpdate(art.arcane.chimera.core.object.ID target, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("publishTargetUpdate").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{target}));
            }

            /**
             * Schedules publishTargetUpdate on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param target No Description Provided
             */
            public static void schedulePublishTargetUpdate(art.arcane.chimera.core.object.ID target, long within) {
                schedulePublishTargetUpdate(target, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes unregisterListenersBySession on the gateway service
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static java.lang.Integer unregisterListenersBySession(java.lang.String id) {
                art.arcane.quill.reaction.O<java.lang.Integer> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("unregisterListenersBySession", id)), "gateway");
                return result.get();
            }

            /**
             * Schedules unregisterListenersBySession on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static void scheduleUnregisterListenersBySession(java.lang.String id, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("unregisterListenersBySession").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{id}));
            }

            /**
             * Schedules unregisterListenersBySession on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static void scheduleUnregisterListenersBySession(java.lang.String id, long within) {
                scheduleUnregisterListenersBySession(id, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

        }
    }

    /**
     * Represents the client protocol type.
     * Service is for inter-communication between backend services
     * Gateway is for clients running server functions, keep authentication & security in mind!
     * Client is for server calling client functions. The implementation server side is ignored.
     */
    public static class CLIENT {
        /**
         * Represents the Hawkeye service via the client protocol type.
         * Service is for inter-communication between backend services
         * Gateway is for clients running server functions, keep authentication & security in mind!
         * Client is for server calling client functions. The implementation server side is ignored.
         */
        public static class Hawkeye {
            /**
             * Invokes targetUpdated(String target) on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param target      The String -> String parameter in dart
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean targetUpdated(java.lang.String __session__, java.lang.String target, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("targetUpdated").params(new art.arcane.quill.collections.KList<Object>().qadd(target)).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes snack(String message) on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param message     The String -> String parameter in dart
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean snack(java.lang.String __session__, java.lang.String message, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("snack").params(new art.arcane.quill.collections.KList<Object>().qadd(message)).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes snack2(String title, String message) on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param title       The String -> String parameter in dart
             * @param message     The String -> String parameter in dart
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean snack2(java.lang.String __session__, java.lang.String title, java.lang.String message, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("snack2").params(new art.arcane.quill.collections.KList<Object>().qadd(title).qadd(message)).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes snackConnectionError(String title, String message) on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param title       The String -> String parameter in dart
             * @param message     The String -> String parameter in dart
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean snackConnectionError(java.lang.String __session__, java.lang.String title, java.lang.String message, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("snackConnectionError").params(new art.arcane.quill.collections.KList<Object>().qadd(title).qadd(message)).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes signOut() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean signOut(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("signOut").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes restart() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean restart(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("restart").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes ping(int v) on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param v           The int -> Long parameter in dart
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the int -> Long value if not blind.
             */
            public static java.lang.Long ping(java.lang.String __session__, java.lang.Long v, java.lang.Boolean blind) {
                return (java.lang.Long) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("ping").params(new art.arcane.quill.collections.KList<Object>().qadd(v)).build(), "java.lang.Long", blind);
            }

            /**
             * Invokes isAndroid() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean isAndroid(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isAndroid").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes isIOS() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean isIOS(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isIOS").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes isFuchsia() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean isFuchsia(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isFuchsia").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes isLinux() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean isLinux(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isLinux").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes isMacOS() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean isMacOS(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isMacOS").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes isWindows() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean isWindows(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isWindows").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes isAndroidOrIOS() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean isAndroidOrIOS(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isAndroidOrIOS").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes isDesktop() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean isDesktop(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isDesktop").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }

            /**
             * Invokes isWeb() on the client connected to the socket id __session__
             *
             * @param __session__ The session id for the connected client.
             * @param blind       If blind is set to true, the call is done async and a null or default result is returned.
             * @return Returns the bool -> Boolean value if not blind.
             */
            public static java.lang.Boolean isWeb(java.lang.String __session__, java.lang.Boolean blind) {
                return (java.lang.Boolean) EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isWeb").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);
            }
        }

        /**
         * Represents the Kraken service via the client protocol type.
         * Service is for inter-communication between backend services
         * Gateway is for clients running server functions, keep authentication & security in mind!
         * Client is for server calling client functions. The implementation server side is ignored.
         */
        public static class Kraken {
        }

        /**
         * Represents the Griffin service via the client protocol type.
         * Service is for inter-communication between backend services
         * Gateway is for clients running server functions, keep authentication & security in mind!
         * Client is for server calling client functions. The implementation server side is ignored.
         */
        public static class Griffin {
        }

        /**
         * Represents the Phoenix service via the client protocol type.
         * Service is for inter-communication between backend services
         * Gateway is for clients running server functions, keep authentication & security in mind!
         * Client is for server calling client functions. The implementation server side is ignored.
         */
        public static class Phoenix {
        }
    }

    /**
     * Represents the gateway protocol type.
     * Service is for inter-communication between backend services
     * Gateway is for clients running server functions, keep authentication & security in mind!
     * Client is for server calling client functions. The implementation server side is ignored.
     */
    public static class GATEWAY {
        /**
         * Represents the paragon service via the gateway protocol type.
         * Service is for inter-communication between backend services
         * Gateway is for clients running server functions, keep authentication & security in mind!
         * Client is for server calling client functions. The implementation server side is ignored.
         */
        public static class Paragon {
            /**
             * Invokes getGradleProjects on the paragon service
             * No Description Provided
             */
            public static art.arcane.quill.collections.KList getGradleProjects() {
                art.arcane.quill.reaction.O<art.arcane.quill.collections.KList> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getGradleProjects")), "paragon");
                return result.get();
            }

            /**
             * Invokes getFlutterProjects on the paragon service
             * No Description Provided
             */
            public static art.arcane.quill.collections.KList getFlutterProjects() {
                art.arcane.quill.reaction.O<art.arcane.quill.collections.KList> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getFlutterProjects")), "paragon");
                return result.get();
            }

            /**
             * Invokes gradleClean on the paragon service
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static java.lang.Boolean gradleClean(java.lang.String project) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("gradleClean", project)), "paragon");
                return result.get();
            }

            /**
             * Schedules gradleClean on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleGradleClean(java.lang.String project, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("gradleClean").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{project}));
            }

            /**
             * Schedules gradleClean on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleGradleClean(java.lang.String project, long within) {
                scheduleGradleClean(project, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes gradleArtifact on the paragon service
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static java.lang.Boolean gradleArtifact(java.lang.String project) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("gradleArtifact", project)), "paragon");
                return result.get();
            }

            /**
             * Schedules gradleArtifact on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleGradleArtifact(java.lang.String project, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("gradleArtifact").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{project}));
            }

            /**
             * Schedules gradleArtifact on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleGradleArtifact(java.lang.String project, long within) {
                scheduleGradleArtifact(project, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes gitSync on the paragon service
             * No Description Provided
             */
            public static java.lang.Boolean gitSync() {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("gitSync")), "paragon");
                return result.get();
            }

            /**
             * Schedules gitSync on any paragon service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleGitSync(long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("gitSync").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{}));
            }

            /**
             * Schedules gitSync on any paragon service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleGitSync(long within) {
                scheduleGitSync(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes flutterBuildAPK on the paragon service
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static java.lang.Boolean flutterBuildAPK(java.lang.String project) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("flutterBuildAPK", project)), "paragon");
                return result.get();
            }

            /**
             * Schedules flutterBuildAPK on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleFlutterBuildAPK(java.lang.String project, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("flutterBuildAPK").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{project}));
            }

            /**
             * Schedules flutterBuildAPK on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleFlutterBuildAPK(java.lang.String project, long within) {
                scheduleFlutterBuildAPK(project, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes flutterBuildWeb on the paragon service
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static java.lang.Boolean flutterBuildWeb(java.lang.String project) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("flutterBuildWeb", project)), "paragon");
                return result.get();
            }

            /**
             * Schedules flutterBuildWeb on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleFlutterBuildWeb(java.lang.String project, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("flutterBuildWeb").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{project}));
            }

            /**
             * Schedules flutterBuildWeb on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleFlutterBuildWeb(java.lang.String project, long within) {
                scheduleFlutterBuildWeb(project, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes flutterClean on the paragon service
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static java.lang.Boolean flutterClean(java.lang.String project) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("flutterClean", project)), "paragon");
                return result.get();
            }

            /**
             * Schedules flutterClean on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleFlutterClean(java.lang.String project, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("flutterClean").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{project}));
            }

            /**
             * Schedules flutterClean on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleFlutterClean(java.lang.String project, long within) {
                scheduleFlutterClean(project, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes flutterPrecache on the paragon service
             * No Description Provided
             */
            public static java.lang.Boolean flutterPrecache() {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("flutterPrecache")), "paragon");
                return result.get();
            }

            /**
             * Schedules flutterPrecache on any paragon service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleFlutterPrecache(long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("flutterPrecache").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{}));
            }

            /**
             * Schedules flutterPrecache on any paragon service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleFlutterPrecache(long within) {
                scheduleFlutterPrecache(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes flutterUpgrade on the paragon service
             * No Description Provided
             */
            public static java.lang.Boolean flutterUpgrade() {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("flutterUpgrade")), "paragon");
                return result.get();
            }

            /**
             * Schedules flutterUpgrade on any paragon service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleFlutterUpgrade(long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("flutterUpgrade").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{}));
            }

            /**
             * Schedules flutterUpgrade on any paragon service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleFlutterUpgrade(long within) {
                scheduleFlutterUpgrade(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes gradleBuild on the paragon service
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static java.lang.Boolean gradleBuild(java.lang.String project) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("gradleBuild", project)), "paragon");
                return result.get();
            }

            /**
             * Schedules gradleBuild on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleGradleBuild(java.lang.String project, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("gradleBuild").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{project}));
            }

            /**
             * Schedules gradleBuild on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleGradleBuild(java.lang.String project, long within) {
                scheduleGradleBuild(project, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes gitPull on the paragon service
             * No Description Provided
             */
            public static java.lang.Boolean gitPull() {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("gitPull")), "paragon");
                return result.get();
            }

            /**
             * Schedules gitPull on any paragon service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleGitPull(long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("gitPull").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{}));
            }

            /**
             * Schedules gitPull on any paragon service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleGitPull(long within) {
                scheduleGitPull(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes flutterBuildAAB on the paragon service
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static java.lang.Boolean flutterBuildAAB(java.lang.String project) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("flutterBuildAAB", project)), "paragon");
                return result.get();
            }

            /**
             * Schedules flutterBuildAAB on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleFlutterBuildAAB(java.lang.String project, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("flutterBuildAAB").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{project}));
            }

            /**
             * Schedules flutterBuildAAB on any paragon service to be done at a scheduled time.
             * No Description Provided
             *
             * @param project No Description Provided
             */
            public static void scheduleFlutterBuildAAB(java.lang.String project, long within) {
                scheduleFlutterBuildAAB(project, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes gitDiscard on the paragon service
             * No Description Provided
             */
            public static java.lang.Boolean gitDiscard() {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("gitDiscard")), "paragon");
                return result.get();
            }

            /**
             * Schedules gitDiscard on any paragon service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleGitDiscard(long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("paragon").deadline(deadline).ttl(ttl).function("gitDiscard").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{}));
            }

            /**
             * Schedules gitDiscard on any paragon service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleGitDiscard(long within) {
                scheduleGitDiscard(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

        }

        /**
         * Represents the account service via the gateway protocol type.
         * Service is for inter-communication between backend services
         * Gateway is for clients running server functions, keep authentication & security in mind!
         * Client is for server calling client functions. The implementation server side is ignored.
         */
        public static class Account {
            /**
             * Invokes releaseToken on the account service
             * No Description Provided
             */
            public static java.lang.Boolean releaseToken() {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("releaseToken")), "account");
                return result.get();
            }

            /**
             * Schedules releaseToken on any account service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleReleaseToken(long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("releaseToken").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{}));
            }

            /**
             * Schedules releaseToken on any account service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleReleaseToken(long within) {
                scheduleReleaseToken(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes signUp on the account service
             * No Description Provided
             *
             * @param firstName No Description Provided
             * @param lastName  No Description Provided
             * @param email     No Description Provided
             * @param password  No Description Provided
             */
            public static art.arcane.chimera.core.object.account.User signUp(java.lang.String firstName, java.lang.String lastName, java.lang.String email, java.lang.String password) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.account.User> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("signUp", firstName, lastName, email, password)), "account");
                return result.get();
            }

            /**
             * Invokes getSomeStream on the account service
             * This function is a downstream function meaning it can bend streams around multiple services.     * No Description Provided
             */
            public static java.io.InputStream getSomeStream() {
                art.arcane.quill.reaction.O<java.io.InputStream> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeDownstreamFunction("getSomeStream")), "account");
                return result.get();
            }

            /**
             * Invokes aquireToken on the account service
             * No Description Provided
             *
             * @param email    No Description Provided
             * @param password No Description Provided
             */
            public static art.arcane.chimera.core.object.account.AccessToken aquireToken(java.lang.String email, java.lang.String password) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.account.AccessToken> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("aquireToken", email, password)), "account");
                return result.get();
            }

            /**
             * Invokes getMe on the account service
             * No Description Provided
             */
            public static art.arcane.chimera.core.object.account.User getMe() {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.account.User> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getMe")), "account");
                return result.get();
            }

            /**
             * Invokes validateToken on the account service
             * No Description Provided
             *
             * @param token No Description Provided
             */
            public static java.lang.Boolean validateToken(art.arcane.chimera.core.object.account.AccessToken token) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("validateToken", token)), "account");
                return result.get();
            }

            /**
             * Schedules validateToken on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param token No Description Provided
             */
            public static void scheduleValidateToken(art.arcane.chimera.core.object.account.AccessToken token, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("validateToken").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{token}));
            }

            /**
             * Schedules validateToken on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param token No Description Provided
             */
            public static void scheduleValidateToken(art.arcane.chimera.core.object.account.AccessToken token, long within) {
                scheduleValidateToken(token, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes requestChangePassword on the account service
             * No Description Provided
             *
             * @param currentPassword No Description Provided
             * @param newPassword     No Description Provided
             */
            public static java.lang.Boolean requestChangePassword(java.lang.String currentPassword, java.lang.String newPassword) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("requestChangePassword", currentPassword, newPassword)), "account");
                return result.get();
            }

            /**
             * Schedules requestChangePassword on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param currentPassword No Description Provided
             * @param newPassword     No Description Provided
             */
            public static void scheduleRequestChangePassword(java.lang.String currentPassword, java.lang.String newPassword, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("account").deadline(deadline).ttl(ttl).function("requestChangePassword").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{currentPassword, newPassword}));
            }

            /**
             * Schedules requestChangePassword on any account service to be done at a scheduled time.
             * No Description Provided
             *
             * @param currentPassword No Description Provided
             * @param newPassword     No Description Provided
             */
            public static void scheduleRequestChangePassword(java.lang.String currentPassword, java.lang.String newPassword, long within) {
                scheduleRequestChangePassword(currentPassword, newPassword, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

        }

        /**
         * Represents the gateway service via the gateway protocol type.
         * Service is for inter-communication between backend services
         * Gateway is for clients running server functions, keep authentication & security in mind!
         * Client is for server calling client functions. The implementation server side is ignored.
         */
        public static class Gateway {
            /**
             * Invokes isRegistered on the gateway service
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static java.lang.Boolean isRegistered(art.arcane.chimera.core.object.ID id) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("isRegistered", id)), "gateway");
                return result.get();
            }

            /**
             * Schedules isRegistered on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static void scheduleIsRegistered(art.arcane.chimera.core.object.ID id, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("isRegistered").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{id}));
            }

            /**
             * Schedules isRegistered on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static void scheduleIsRegistered(art.arcane.chimera.core.object.ID id, long within) {
                scheduleIsRegistered(id, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes getSessionId on the gateway service
             * No Description Provided
             */
            public static java.lang.String getSessionId() {
                art.arcane.quill.reaction.O<java.lang.String> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("getSessionId")), "gateway");
                return result.get();
            }

            /**
             * Invokes ping on the gateway service
             * No Description Provided
             */
            public static java.lang.Boolean ping() {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("ping")), "gateway");
                return result.get();
            }

            /**
             * Schedules ping on any gateway service to be done at a scheduled time.
             * No Description Provided
             */
            public static void schedulePing(long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("ping").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{}));
            }

            /**
             * Schedules ping on any gateway service to be done at a scheduled time.
             * No Description Provided
             */
            public static void schedulePing(long within) {
                schedulePing(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes unregisterListener on the gateway service
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static java.lang.Boolean unregisterListener(art.arcane.chimera.core.object.ID id) {
                art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("unregisterListener", id)), "gateway");
                return result.get();
            }

            /**
             * Schedules unregisterListener on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static void scheduleUnregisterListener(art.arcane.chimera.core.object.ID id, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("unregisterListener").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{id}));
            }

            /**
             * Schedules unregisterListener on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param id No Description Provided
             */
            public static void scheduleUnregisterListener(art.arcane.chimera.core.object.ID id, long within) {
                scheduleUnregisterListener(id, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes registerListener on the gateway service
             * No Description Provided
             *
             * @param target No Description Provided
             */
            public static art.arcane.chimera.core.object.ID registerListener(art.arcane.chimera.core.object.ID target) {
                art.arcane.quill.reaction.O<art.arcane.chimera.core.object.ID> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("registerListener", target)), "gateway");
                return result.get();
            }

            /**
             * Invokes unregisterAll on the gateway service
             * No Description Provided
             */
            public static java.lang.Integer unregisterAll() {
                art.arcane.quill.reaction.O<java.lang.Integer> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("unregisterAll")), "gateway");
                return result.get();
            }

            /**
             * Schedules unregisterAll on any gateway service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleUnregisterAll(long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("unregisterAll").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{}));
            }

            /**
             * Schedules unregisterAll on any gateway service to be done at a scheduled time.
             * No Description Provided
             */
            public static void scheduleUnregisterAll(long within) {
                scheduleUnregisterAll(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

            /**
             * Invokes unregisterAllWithTarget on the gateway service
             * No Description Provided
             *
             * @param target No Description Provided
             */
            public static java.lang.Integer unregisterAllWithTarget(art.arcane.chimera.core.object.ID target) {
                art.arcane.quill.reaction.O<java.lang.Integer> result = new art.arcane.quill.reaction.O<>();
                ((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).serviceWork(() -> result.set(((art.arcane.chimera.core.microservice.ChimeraBackendService) art.arcane.chimera.core.Chimera.delegate).invokeFunction("unregisterAllWithTarget", target)), "gateway");
                return result.get();
            }

            /**
             * Schedules unregisterAllWithTarget on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param target No Description Provided
             */
            public static void scheduleUnregisterAllWithTarget(art.arcane.chimera.core.object.ID target, long deadline, long ttl) {
                art.arcane.chimera.core.Chimera.delegate.getServiceDatabase().setAsync(art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("unregisterAllWithTarget").id(art.arcane.chimera.core.object.ID.randomUUID().toString()).build().encodeParameters(new Object[]{target}));
            }

            /**
             * Schedules unregisterAllWithTarget on any gateway service to be done at a scheduled time.
             * No Description Provided
             *
             * @param target No Description Provided
             */
            public static void scheduleUnregisterAllWithTarget(art.arcane.chimera.core.object.ID target, long within) {
                scheduleUnregisterAllWithTarget(target, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());
            }

        }
    }
}

