package art.arcane.chimera.core.protocol;

/**
 * This was generated by Chimera ProtoGen on Tue Mar 16 09:52:37 EDT 2021
 */
public class EDN
{
/**
 * Represents the service protocol type.
 * Service is for inter-communication between backend services
 * Gateway is for clients running server functions, keep authentication & security in mind!
 * Client is for server calling client functions. The implementation server side is ignored.
 */
public static class SERVICE
{
/**
 * Represents the mail service via the service protocol type.
 * Service is for inter-communication between backend services
 * Gateway is for clients running server functions, keep authentication & security in mind!
 * Client is for server calling client functions. The implementation server side is ignored.
 */
public static class Mail
{
    /**
     * Invokes sendMail on the mail service
     * No Description Provided
     * @param emailAddress No Description Provided
     * @param subject No Description Provided
     * @param message No Description Provided
     */
    public static java.lang.Boolean sendMail(java.lang.String emailAddress, java.lang.String subject, java.lang.String message) {art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("sendMail", emailAddress, subject, message)), "mail"); return result.get();}

    /**
     * Schedules sendMail on any mail service to be done at a scheduled time.
     * No Description Provided
     * @param emailAddress No Description Provided
     * @param subject No Description Provided
     * @param message No Description Provided
     */
    public static void scheduleSendMail(java.lang.String emailAddress, java.lang.String subject, java.lang.String message, long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("mail").deadline(deadline).ttl(ttl).function("sendMail").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{emailAddress, subject, message}).push();}

    /**
     * Schedules sendMail on any mail service to be done at a scheduled time.
     * No Description Provided
     * @param emailAddress No Description Provided
     * @param subject No Description Provided
     * @param message No Description Provided
     */
    public static void scheduleSendMail(java.lang.String emailAddress, java.lang.String subject, java.lang.String message, long within) {
scheduleSendMail(emailAddress, subject, message, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

    /**
     * Invokes sendMailHtml on the mail service
     * No Description Provided
     * @param emailAddress No Description Provided
     * @param subject No Description Provided
     * @param html No Description Provided
     */
    public static java.lang.Boolean sendMailHtml(java.lang.String emailAddress, java.lang.String subject, java.lang.String html) {art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("sendMailHtml", emailAddress, subject, html)), "mail"); return result.get();}

    /**
     * Schedules sendMailHtml on any mail service to be done at a scheduled time.
     * No Description Provided
     * @param emailAddress No Description Provided
     * @param subject No Description Provided
     * @param html No Description Provided
     */
    public static void scheduleSendMailHtml(java.lang.String emailAddress, java.lang.String subject, java.lang.String html, long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("mail").deadline(deadline).ttl(ttl).function("sendMailHtml").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{emailAddress, subject, html}).push();}

    /**
     * Schedules sendMailHtml on any mail service to be done at a scheduled time.
     * No Description Provided
     * @param emailAddress No Description Provided
     * @param subject No Description Provided
     * @param html No Description Provided
     */
    public static void scheduleSendMailHtml(java.lang.String emailAddress, java.lang.String subject, java.lang.String html, long within) {
scheduleSendMailHtml(emailAddress, subject, html, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

}
/**
 * Represents the gateway service via the service protocol type.
 * Service is for inter-communication between backend services
 * Gateway is for clients running server functions, keep authentication & security in mind!
 * Client is for server calling client functions. The implementation server side is ignored.
 */
public static class Gateway
{
    /**
     * Invokes unregisterListenersBySession on the gateway service
     * No Description Provided
     * @param id No Description Provided
     */
    public static java.lang.Integer unregisterListenersBySession(java.lang.String id) {art.arcane.quill.reaction.O<java.lang.Integer> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("unregisterListenersBySession", id)), "gateway"); return result.get();}

    /**
     * Schedules unregisterListenersBySession on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param id No Description Provided
     */
    public static void scheduleUnregisterListenersBySession(java.lang.String id, long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("unregisterListenersBySession").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{id}).push();}

    /**
     * Schedules unregisterListenersBySession on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param id No Description Provided
     */
    public static void scheduleUnregisterListenersBySession(java.lang.String id, long within) {
scheduleUnregisterListenersBySession(id, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

    /**
     * Invokes getFirstSessionByUser on the gateway service
     * No Description Provided
     * @param user No Description Provided
     */
    public static art.arcane.chimera.core.object.Session getFirstSessionByUser(art.arcane.quill.collections.ID user) {art.arcane.quill.reaction.O<art.arcane.chimera.core.object.Session> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("getFirstSessionByUser", user)), "gateway"); return result.get();}

    /**
     * Invokes cleanupDeadListeners on the gateway service
     * No Description Provided
     */
    public static java.lang.Integer cleanupDeadListeners() {art.arcane.quill.reaction.O<java.lang.Integer> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("cleanupDeadListeners")), "gateway"); return result.get();}

    /**
     * Schedules cleanupDeadListeners on any gateway service to be done at a scheduled time.
     * No Description Provided
     */
    public static void scheduleCleanupDeadListeners(long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("cleanupDeadListeners").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{}).push();}

    /**
     * Schedules cleanupDeadListeners on any gateway service to be done at a scheduled time.
     * No Description Provided
     */
    public static void scheduleCleanupDeadListeners(long within) {
scheduleCleanupDeadListeners(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

    /**
     * Invokes publishTargetUpdate on the gateway service
     * No Description Provided
     * @param target No Description Provided
     */
    public static java.lang.Boolean publishTargetUpdate(art.arcane.quill.collections.ID target) {art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("publishTargetUpdate", target)), "gateway"); return result.get();}

    /**
     * Schedules publishTargetUpdate on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param target No Description Provided
     */
    public static void schedulePublishTargetUpdate(art.arcane.quill.collections.ID target, long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("publishTargetUpdate").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{target}).push();}

    /**
     * Schedules publishTargetUpdate on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param target No Description Provided
     */
    public static void schedulePublishTargetUpdate(art.arcane.quill.collections.ID target, long within) {
schedulePublishTargetUpdate(target, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

    /**
     * Invokes getSessionsListening on the gateway service
     * No Description Provided
     * @param target No Description Provided
     */
    public static art.arcane.quill.collections.KList getSessionsListening(art.arcane.quill.collections.ID target) {art.arcane.quill.reaction.O<art.arcane.quill.collections.KList> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("getSessionsListening", target)), "gateway"); return result.get();}

    /**
     * Invokes cleanupDeadSessions on the gateway service
     * No Description Provided
     */
    public static java.lang.Integer cleanupDeadSessions() {art.arcane.quill.reaction.O<java.lang.Integer> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("cleanupDeadSessions")), "gateway"); return result.get();}

    /**
     * Schedules cleanupDeadSessions on any gateway service to be done at a scheduled time.
     * No Description Provided
     */
    public static void scheduleCleanupDeadSessions(long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("cleanupDeadSessions").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{}).push();}

    /**
     * Schedules cleanupDeadSessions on any gateway service to be done at a scheduled time.
     * No Description Provided
     */
    public static void scheduleCleanupDeadSessions(long within) {
scheduleCleanupDeadSessions(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

    /**
     * Invokes getFirstSessionByToken on the gateway service
     * No Description Provided
     * @param token No Description Provided
     */
    public static art.arcane.chimera.core.object.Session getFirstSessionByToken(art.arcane.quill.collections.ID token) {art.arcane.quill.reaction.O<art.arcane.chimera.core.object.Session> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("getFirstSessionByToken", token)), "gateway"); return result.get();}

    /**
     * Invokes getSessionsByUser on the gateway service
     * No Description Provided
     * @param user No Description Provided
     */
    public static art.arcane.quill.collections.KList getSessionsByUser(art.arcane.quill.collections.ID user) {art.arcane.quill.reaction.O<art.arcane.quill.collections.KList> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("getSessionsByUser", user)), "gateway"); return result.get();}

    /**
     * Invokes getSessionsByToken on the gateway service
     * No Description Provided
     * @param token No Description Provided
     */
    public static art.arcane.quill.collections.KList getSessionsByToken(art.arcane.quill.collections.ID token) {art.arcane.quill.reaction.O<art.arcane.quill.collections.KList> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("getSessionsByToken", token)), "gateway"); return result.get();}

    /**
     * Invokes getSessionByID on the gateway service
     * No Description Provided
     * @param id No Description Provided
     */
    public static art.arcane.chimera.core.object.Session getSessionByID(java.lang.String id) {art.arcane.quill.reaction.O<art.arcane.chimera.core.object.Session> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("getSessionByID", id)), "gateway"); return result.get();}

    /**
     * Invokes invokeClientObject on the gateway service
     * No Description Provided
     * @param sessionId No Description Provided
     * @param f No Description Provided
     * @param expectedReturn No Description Provided
     * @param blind No Description Provided
     */
    public static java.lang.Object invokeClientObject(java.lang.String sessionId, art.arcane.chimera.core.protocol.generation.FunctionReference f, java.lang.String expectedReturn, java.lang.Boolean blind) {art.arcane.quill.reaction.O<java.lang.Object> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("invokeClientObject", sessionId, f, expectedReturn, blind)), "gateway"); return result.get();}

    /**
     * Invokes pushContext on the gateway service
     * No Description Provided
     * @param context No Description Provided
     */
    public static java.lang.Boolean pushContext(art.arcane.chimera.core.protocol.ChimeraContext context) {art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("pushContext", context)), "gateway"); return result.get();}

    /**
     * Schedules pushContext on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param context No Description Provided
     */
    public static void schedulePushContext(art.arcane.chimera.core.protocol.ChimeraContext context, long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("pushContext").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{context}).push();}

    /**
     * Schedules pushContext on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param context No Description Provided
     */
    public static void schedulePushContext(art.arcane.chimera.core.protocol.ChimeraContext context, long within) {
schedulePushContext(context, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

}
}
/**
 * Represents the client protocol type.
 * Service is for inter-communication between backend services
 * Gateway is for clients running server functions, keep authentication & security in mind!
 * Client is for server calling client functions. The implementation server side is ignored.
 */
public static class CLIENT
{
/**
 * Represents the Hawkeye service via the client protocol type.
 * Service is for inter-communication between backend services
 * Gateway is for clients running server functions, keep authentication & security in mind!
 * Client is for server calling client functions. The implementation server side is ignored.
 */
public static class Hawkeye
{
/**
 * Invokes targetUpdated(String target) on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param target The String -> String parameter in dart 
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean targetUpdated(java.lang.String __session__, java.lang.String target, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("targetUpdated").params(new art.arcane.quill.collections.KList<Object>().qadd(target)).build(), "java.lang.Boolean", blind);}
/**
 * Invokes snack(String message) on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param message The String -> String parameter in dart 
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean snack(java.lang.String __session__, java.lang.String message, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("snack").params(new art.arcane.quill.collections.KList<Object>().qadd(message)).build(), "java.lang.Boolean", blind);}
/**
 * Invokes snack2(String title, String message) on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param title The String -> String parameter in dart 
 * @param message The String -> String parameter in dart 
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean snack2(java.lang.String __session__, java.lang.String title, java.lang.String message, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("snack2").params(new art.arcane.quill.collections.KList<Object>().qadd(title).qadd(message)).build(), "java.lang.Boolean", blind);}
/**
 * Invokes snackConnectionError(String title, String message) on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param title The String -> String parameter in dart 
 * @param message The String -> String parameter in dart 
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean snackConnectionError(java.lang.String __session__, java.lang.String title, java.lang.String message, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("snackConnectionError").params(new art.arcane.quill.collections.KList<Object>().qadd(title).qadd(message)).build(), "java.lang.Boolean", blind);}
/**
 * Invokes signOut() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean signOut(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("signOut").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
/**
 * Invokes restart() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean restart(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("restart").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
/**
 * Invokes ping(int v) on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param v The int -> Long parameter in dart 
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the int -> Long value if not blind.
 */
public static java.lang.Long ping(java.lang.String __session__, java.lang.Long v, java.lang.Boolean blind){
return (java.lang.Long)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("ping").params(new art.arcane.quill.collections.KList<Object>().qadd(v)).build(), "java.lang.Long", blind);}
/**
 * Invokes isAndroid() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean isAndroid(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isAndroid").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
/**
 * Invokes isIOS() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean isIOS(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isIOS").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
/**
 * Invokes isFuchsia() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean isFuchsia(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isFuchsia").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
/**
 * Invokes isLinux() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean isLinux(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isLinux").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
/**
 * Invokes isMacOS() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean isMacOS(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isMacOS").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
/**
 * Invokes isWindows() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean isWindows(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isWindows").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
/**
 * Invokes isAndroidOrIOS() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean isAndroidOrIOS(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isAndroidOrIOS").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
/**
 * Invokes isDesktop() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean isDesktop(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isDesktop").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
/**
 * Invokes isWeb() on the client connected to the socket id __session__
 * @param __session__ The session id for the connected client.
 * @param blind If blind is set to true, the call is done async and a null or default result is returned.
 * @return Returns the bool -> Boolean value if not blind.
 */
public static java.lang.Boolean isWeb(java.lang.String __session__, java.lang.Boolean blind){
return (java.lang.Boolean)EDN.SERVICE.Gateway.invokeClientObject(__session__, art.arcane.chimera.core.protocol.generation.FunctionReference.builder().function("isWeb").params(new art.arcane.quill.collections.KList<Object>()).build(), "java.lang.Boolean", blind);}
}
/**
 * Represents the Application service via the client protocol type.
 * Service is for inter-communication between backend services
 * Gateway is for clients running server functions, keep authentication & security in mind!
 * Client is for server calling client functions. The implementation server side is ignored.
 */
public static class Application
{
}
}
/**
 * Represents the gateway protocol type.
 * Service is for inter-communication between backend services
 * Gateway is for clients running server functions, keep authentication & security in mind!
 * Client is for server calling client functions. The implementation server side is ignored.
 */
public static class GATEWAY
{
/**
 * Represents the gateway service via the gateway protocol type.
 * Service is for inter-communication between backend services
 * Gateway is for clients running server functions, keep authentication & security in mind!
 * Client is for server calling client functions. The implementation server side is ignored.
 */
public static class Gateway
{
    /**
     * Invokes isRegistered on the gateway service
     * No Description Provided
     * @param id No Description Provided
     */
    public static java.lang.Boolean isRegistered(art.arcane.quill.collections.ID id) {art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("isRegistered", id)), "gateway"); return result.get();}

    /**
     * Schedules isRegistered on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param id No Description Provided
     */
    public static void scheduleIsRegistered(art.arcane.quill.collections.ID id, long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("isRegistered").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{id}).push();}

    /**
     * Schedules isRegistered on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param id No Description Provided
     */
    public static void scheduleIsRegistered(art.arcane.quill.collections.ID id, long within) {
scheduleIsRegistered(id, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

    /**
     * Invokes unregisterAllWithTarget on the gateway service
     * No Description Provided
     * @param target No Description Provided
     */
    public static java.lang.Integer unregisterAllWithTarget(art.arcane.quill.collections.ID target) {art.arcane.quill.reaction.O<java.lang.Integer> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("unregisterAllWithTarget", target)), "gateway"); return result.get();}

    /**
     * Schedules unregisterAllWithTarget on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param target No Description Provided
     */
    public static void scheduleUnregisterAllWithTarget(art.arcane.quill.collections.ID target, long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("unregisterAllWithTarget").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{target}).push();}

    /**
     * Schedules unregisterAllWithTarget on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param target No Description Provided
     */
    public static void scheduleUnregisterAllWithTarget(art.arcane.quill.collections.ID target, long within) {
scheduleUnregisterAllWithTarget(target, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

    /**
     * Invokes getSessionId on the gateway service
     * No Description Provided
     */
    public static java.lang.String getSessionId() {art.arcane.quill.reaction.O<java.lang.String> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("getSessionId")), "gateway"); return result.get();}

    /**
     * Invokes unregisterListener on the gateway service
     * No Description Provided
     * @param id No Description Provided
     */
    public static java.lang.Boolean unregisterListener(art.arcane.quill.collections.ID id) {art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("unregisterListener", id)), "gateway"); return result.get();}

    /**
     * Schedules unregisterListener on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param id No Description Provided
     */
    public static void scheduleUnregisterListener(art.arcane.quill.collections.ID id, long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("unregisterListener").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{id}).push();}

    /**
     * Schedules unregisterListener on any gateway service to be done at a scheduled time.
     * No Description Provided
     * @param id No Description Provided
     */
    public static void scheduleUnregisterListener(art.arcane.quill.collections.ID id, long within) {
scheduleUnregisterListener(id, art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

    /**
     * Invokes unregisterAll on the gateway service
     * No Description Provided
     */
    public static java.lang.Integer unregisterAll() {art.arcane.quill.reaction.O<java.lang.Integer> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("unregisterAll")), "gateway"); return result.get();}

    /**
     * Schedules unregisterAll on any gateway service to be done at a scheduled time.
     * No Description Provided
     */
    public static void scheduleUnregisterAll(long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("unregisterAll").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{}).push();}

    /**
     * Schedules unregisterAll on any gateway service to be done at a scheduled time.
     * No Description Provided
     */
    public static void scheduleUnregisterAll(long within) {
scheduleUnregisterAll(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

    /**
     * Invokes registerListener on the gateway service
     * No Description Provided
     * @param target No Description Provided
     */
    public static art.arcane.quill.collections.ID registerListener(art.arcane.quill.collections.ID target) {art.arcane.quill.reaction.O<art.arcane.quill.collections.ID> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("registerListener", target)), "gateway"); return result.get();}

    /**
     * Invokes ping on the gateway service
     * No Description Provided
     */
    public static java.lang.Boolean ping() {art.arcane.quill.reaction.O<java.lang.Boolean> result = new art.arcane.quill.reaction.O<>();art.arcane.chimera.core.Chimera.backend.serviceWork(() -> result.set(art.arcane.chimera.core.Chimera.backend.invokeFunction("ping")), "gateway"); return result.get();}

    /**
     * Schedules ping on any gateway service to be done at a scheduled time.
     * No Description Provided
     */
    public static void schedulePing(long deadline, long ttl) {
((art.arcane.chimera.core.object.ServiceJob)art.arcane.chimera.core.object.ServiceJob.builder().service("gateway").deadline(deadline).ttl(ttl).function("ping").id(new art.arcane.quill.collections.ID()).build().archon(art.arcane.chimera.core.Chimera.backend.getDatabase())).encodeParameters(new Object[]{}).push();}

    /**
     * Schedules ping on any gateway service to be done at a scheduled time.
     * No Description Provided
     */
    public static void schedulePing(long within) {
schedulePing(art.arcane.quill.math.M.ms() + within, art.arcane.quill.math.M.ms());}

}
}
}

